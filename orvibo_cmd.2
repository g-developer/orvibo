/***************************************************************************
 * 
 * Copyright (c) 2014 Baidu.com, Inc. All Rights Reserved
 * $Id$ 
 * 
 **************************************************************************/



/**
 * @file orvibo_cmd.c
 * @author work(zhangyouchang@baidu.com)
 * @date 2014/09/19 12:00:22
 * @version $Revision$ 
 * @brief 
 *  
 **/


#include "orvibo_cmd.h"
#include "orvibo_socket.h"
#include "orvibo_util.h"

/*
int getCmd(_Orvibo_Cmd_List_T *cmdList, char *cmdqa, _Orvibo_Cmd_Info_T *cmd_info){
	unsigned char t[] = {0x68, 0x64, 0x00, 0x06, 0x71, 0x61};
	char *cmd = "qa";
	memset(cmd_info, 0, sizeof(_Orvibo_Cmd_Info_T));
	int cmd_len = strlen(cmd) + 1;
	cmd_info->cmd_name = (char*)malloc(sizeof(char) * cmd_len);
	snprintf(cmd_info->cmd_name, cmd_len, "%s", cmd);
	int cmd_msg_len = sizeof(t);
	cmd_info->cmd_msg = (unsigned char*)malloc(sizeof(char) * cmd_msg_len);
	//snprintf(cmd_info->cmd_msg, cmd_msg_len, "%u", t);
	cmd_info->cmd_len = cmd_msg_len;
	int i = 0;
	for(i=0; i<sizeof(t); i++){
		printf("%d--1--%x\t", i, t[i]);
		cmd_info->cmd_msg[i] = t[i];
	}
	printf("\n-----sizeof(t)[%d]\n",cmd_msg_len);
	for(i=0; i<sizeof(t); i++){
		printf("%d--2--%x\t", i, cmd_info->cmd_msg[i]);
	}
	printf("\n");
	return 0;
}
*/

void destroy_cmd_info(_Orvibo_Cmd_Info_T *cmd_info){
	if(NULL != cmd_info){
		if(NULL != cmd_info->cmd_name){
			free(cmd_info->cmd_name);
		}
		if(NULL != cmd_info->cmd_msg){
			free(cmd_info->cmd_msg);
		}
		free(cmd_info);
	}
}

void destroy_msg_info(_Orvibo_Msg_Info_T *msg_info){
	if(NULL != msg_info){
		if(NULL != msg_info->requset){
			destroy_cmd_info(msg_info->requset);
		}
		if(NULL != msg_info->response){
			destroy_cmd_info(msg_info->response);
		}
		free(msg_info);
	}
}

void display_msg(_Orvibo_Msg_Info_T* talk){
	if(NULL == talk){
		printf("\n");
	}else{
		printf("request id[%ld]\n", talk->req_id);
		int i = 0;
		printf("%s:%d send		cmd[%s]:\n", inet_ntoa(talk->ask.sin_addr), talk->ask.sin_port, talk->requset->cmd_name);
		unsigned char* tmp = talk->requset->cmd_msg;
		for(i=0; i<talk->requset->cmd_len; i++){
			printf("\t%x", tmp[i]);
		}
		printf("\n");
		printf("%s:%d answer	cmd[%s]:\n", inet_ntoa(talk->answer.sin_addr), talk->answer.sin_port, talk->response->cmd_name);
		tmp = talk->response->cmd_msg;
		for(i=0; i<talk->response->cmd_len; i++){
			printf("\t%x", tmp[i]);
		}
		printf("\n");
	}
}

int read_orvibo_schema(_Orvibo_Schema_Config_Map_T schema_config[], _Orvibo_Cmd_Config_T *cmd_conf, unsigned long bucket_num){
	if(NULL == schema_config || NULL == cmd_conf){
		return -1;
	}
	_Orvibo_Schema_Config_Map_T *tmp_schema;
	char *tmp;
	int i = 0;
	int j = 0;
	int k = 0;
	int unit_start = 0, unit_end = 0;
	int hash_index = 0, cmd_name_len = 0;
	tmp_schema = schema_config;

	unsigned char **sp_tmp1 = NULL;
	unsigned char **sp_tmp2 = NULL;
	//while(NULL != tmp_schema->cmd_name){
	while(NULL != schema_config[i].cmd_name){
		j = 0;
		tmp_schema = &(schema_config[i]);
		cmd_name_len = strlen(tmp_schema->cmd_name) + 1;
		printf("i---temp_schema[%d][cmd_name]		:	%s\n", i, tmp_schema->cmd_name);
		printf("i---temp_schema[%d][cmd_send_schema]	:	%s\n", i, tmp_schema->cmd_send_schema);
		printf("i---temp_schema[%d][cmd_recv_schema]	:	%s\n", i, tmp_schema->cmd_recv_schema);
		printf("i---temp_schema[%d][is_broadcast]	:	%d\n", i, tmp_schema->is_broadcast);
		hash_index = get_schema_hash_num(tmp_schema->cmd_name, bucket_num);

		//赋值 cmd_name
		cmd_conf[hash_index].cmd_name = (unsigned char*)malloc(sizeof(unsigned char) * cmd_name_len);
		snprintf(cmd_conf[hash_index].cmd_name, cmd_name_len, "%s", tmp_schema->cmd_name);
		//是否是广播
		cmd_conf[hash_index].is_broadcast = tmp_schema->is_broadcast;
		//采用Hash桶，根据实际情况，cmd不会出现重复的情况，所以next为NULL，用不到
		cmd_conf[hash_index].next = NULL;
		//为_Orvibo_Cmd_T cmd申请存储空间
		cmd_conf[hash_index].cmd = (_Orvibo_Cmd_T *)malloc(sizeof(_Orvibo_Cmd_T));

		//解析发送头格式，并且赋值到cmd_conf[hash_index]->cmd->requset_schema
		//cmd_conf[hash_index]->cmd->requset_schema = (_Orvibo_Schema_T *)malloc(sizeof(_Orvibo_Schema_T) * 1);

		_Orvibo_Schema_T *schema_tmp = NULL, *schema_tmp_1 = NULL, *schema_head = NULL;
		sp_tmp1 = split_str_2_arr(tmp_schema->cmd_send_schema, ',');

		schema_head = (_Orvibo_Schema_T *)malloc(sizeof(_Orvibo_Schema_T) * 1);
		schema_head->schema = NULL;
		schema_head->next = NULL;
		schema_head->count = 0;
		(&cmd_conf[hash_index])->cmd->requset_schema = schema_head;
		schema_tmp = schema_head;

		_Orvibo_Schema_Unit_T *unit_tmp = NULL;
		unit_start = unit_end = 0;
		while(NULL != sp_tmp1 && NULL != sp_tmp1[j]){

			schema_tmp_1 = (_Orvibo_Schema_T *)malloc(sizeof(_Orvibo_Schema_T) * 1);
			schema_head->count++;	
			schema_tmp_1->count = schema_head->count + 1;
			schema_tmp_1->schema = NULL;

			sp_tmp2 = split_str_2_arr(sp_tmp1[j], ':');
			printf("sp_tmp2[0]=%s\n", sp_tmp2[0]);
			printf("sp_tmp2[1]=%ld\n", strtol(sp_tmp2[1], NULL, 10));
			k = 0; 
			//为单元申请空间
			unit_tmp = (_Orvibo_Schema_Unit_T *)malloc(sizeof(_Orvibo_Schema_Unit_T) * 1);
			//为title赋值
			unit_tmp->title = (unsigned char *)malloc(sizeof(unsigned char) * (strlen(sp_tmp2[0]) + 1));
			snprintf(unit_tmp->title, strlen(sp_tmp2[0]) + 1, "%s", sp_tmp2[0]);
			unit_tmp->len = strtol(sp_tmp2[1], NULL, 10);
			unit_tmp->index = j;
			unit_tmp->start = unit_start;
			unit_end += unit_tmp->len;
			unit_tmp->end = unit_end;
			unit_start = unit_end;
			
			schema_tmp_1->schema = unit_tmp;
			free_str_2_arr(sp_tmp2);
					
			schema_tmp->next = schema_tmp_1;
			printf("1---[%d]-------name[%s]\n", j, schema_tmp_1->schema->title);
			if(j != 0){
				printf("2---[%d]-------name[%s]\n", j, schema_tmp->schema->title);
			}
			schema_tmp = schema_tmp->next;
			printf("3---[%d]-------name[%s]\n", j, schema_tmp->schema->title);
			j++;
		}
		free_str_2_arr(sp_tmp1);
		i++;
	}
	display_cmd_config(cmd_conf, bucket_num);
	return 0;
}

void display_cmd_config(_Orvibo_Cmd_Config_T *cmd_conf, unsigned long bucket_num){
	_Orvibo_Cmd_Config_T *cmd_conf_tmp = NULL;
	unsigned long i = 0;
	unsigned long k = 0;
	_Orvibo_Schema_T *tmp = NULL;
	for(i=0; i<bucket_num; i++){
		i = 18;
		if(NULL == cmd_conf[i].cmd_name){
			continue;
		}
		printf("The cmd_conf[%ld] Info Below\n", i);
		printf("\tcmd_name				:	%s\n", cmd_conf[i].cmd_name);
		printf("\tis_broadcast				:	%d\n", cmd_conf[i].is_broadcast);
		printf("\trequest_schema count			:	%d\n", cmd_conf[i].cmd->requset_schema->count);
		tmp = cmd_conf[i].cmd->requset_schema;
		tmp = tmp->next;
		while(NULL != tmp && NULL != tmp->schema){
				printf("\t\t%d----Unit TiTile		:	%s\n", k, tmp->schema->title);
				printf("\t\t%d----Unit Len			:	%d\n", k, tmp->schema->len);
				printf("\t\t%d----Unit Index			:	%d\n", k, tmp->schema->index);
				printf("\t\t%d----Unit Start			:	%d\n", k, tmp->schema->start);
				printf("\t\t%d----Unit End			:	%d\n", k, tmp->schema->end);
				tmp = tmp->next;
			k++;
		}
	
		printf("\n");
	}
}

/*
int main(){
	_Orvibo_Cmd_Info_T *cmd_info = (_Orvibo_Cmd_Info_T *)malloc(sizeof(_Orvibo_Cmd_Info_T));
	memset(cmd_info, 0, sizeof(_Orvibo_Cmd_Info_T));
	getCmd(cmd, "qa", cmd_info);

	free(cmd_info);
}
*/















/* vim: set ts=4 sw=4 sts=4 tw=100 */
